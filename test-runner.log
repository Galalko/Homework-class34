2021-11-21 01:48:02 info: ---------------------------------------
2021-11-21 01:48:02 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 01:48:02 info: ---------------------------------------
2021-11-21 01:48:07 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (4 ms)
    √ should have all TODO comments removed
    × should call `new Promise()`
    × should take a single argument (2 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        2.129 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 01:48:08 error: *** ESLint Report ***

ex1-johnWho.js
  38:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 01:48:58 info: ---------------------------------------
2021-11-21 01:48:58 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 01:48:58 info: ---------------------------------------
2021-11-21 01:49:01 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (5 ms)
    √ should have all TODO comments removed (1 ms)
    × should call `new Promise()`
    × should take a single argument (3 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.77 s, estimated 2 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 01:49:02 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:27:04 info: ---------------------------------------
2021-11-21 10:27:04 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:27:04 info: ---------------------------------------
2021-11-21 10:27:23 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (2 ms)
    √ should have all TODO comments removed
    × should call `new Promise()`
    × should take a single argument (2 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        12.056 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:27:28 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:31:57 info: ---------------------------------------
2021-11-21 10:31:57 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:31:57 info: ---------------------------------------
2021-11-21 10:32:00 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed (1 ms)
    × should call `new Promise()`
    × should take a single argument (2 ms)
    × `resolve()` should be called with a one argument
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.499 s, estimated 4 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:32:01 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:33:10 info: Disclaimer turned off
2021-11-21 10:34:37 info: ---------------------------------------
2021-11-21 10:34:37 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:34:37 info: ---------------------------------------
2021-11-21 10:34:39 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (2 ms)
    √ should have all TODO comments removed
    × should call `new Promise()`
    × should take a single argument (2 ms)
    × `resolve()` should be called with a one argument
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.361 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:34:41 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:35:22 info: ---------------------------------------
2021-11-21 10:35:22 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:35:22 info: ---------------------------------------
2021-11-21 10:35:25 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call `new Promise()` (1 ms)
    × should take a single argument (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.538 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:35:26 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:37:47 info: ---------------------------------------
2021-11-21 10:37:47 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:37:47 info: ---------------------------------------
2021-11-21 10:37:50 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call `new Promise()` (1 ms)
    × should take a single argument (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.462 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:37:51 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:39:00 info: ---------------------------------------
2021-11-21 10:39:00 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:39:00 info: ---------------------------------------
2021-11-21 10:39:03 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (2 ms)
    √ should have all TODO comments removed
    × should call `new Promise()`
    × should take a single argument (2 ms)
    × `resolve()` should be called with a one argument
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.334 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:39:04 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:40:30 info: ---------------------------------------
2021-11-21 10:40:30 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:40:30 info: ---------------------------------------
2021-11-21 10:40:33 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (5 ms)
    √ should have all TODO comments removed (1 ms)
    × should call `new Promise()` (1 ms)
    × should take a single argument (2 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.364 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:40:34 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:41:32 info: ---------------------------------------
2021-11-21 10:41:32 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:41:32 info: ---------------------------------------
2021-11-21 10:41:35 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call `new Promise()` (1 ms)
    × should take a single argument (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.454 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:41:36 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:42:55 info: ---------------------------------------
2021-11-21 10:42:55 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:42:55 info: ---------------------------------------
2021-11-21 10:42:58 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call `new Promise()` (1 ms)
    × should take a single argument (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.48 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:42:59 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:44:34 info: ---------------------------------------
2021-11-21 10:44:34 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:44:34 info: ---------------------------------------
2021-11-21 10:44:37 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call `new Promise()` (1 ms)
    × should take a single argument (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should resolve when called with a string argument (1 ms)
    × should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      43 |
      44 |   test('should exist and be executable', () => {
    > 45 |     expect(exported).toBeDefined();
         |                      ^
      46 |   });
      47 |
      48 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:45:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      66 |   test('should resolve when called with a string argument', () => {
      67 |     expect.assertions(3);
    > 68 |     expect(exported).toBeDefined();
         |                      ^
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);
      71 |     return expect(promise).resolves.toEqual('John Doe');

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      74 |   test('should reject with an Error object when called without an argument', () => {
      75 |     expect.assertions(3);
    > 76 |     expect(exported).toBeDefined();
         |                      ^
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:76:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        1.331 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 10:44:38 error: *** ESLint Report ***

ex1-johnWho.js
  37:7  error  Parsing error: Identifier 'getAnonName' has already been declared

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:45:33 info: ---------------------------------------
2021-11-21 10:45:33 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:45:33 info: ---------------------------------------
2021-11-21 10:45:36 info: All unit tests passed.
2021-11-21 10:45:38 info: All steps were completed successfully
2021-11-21 10:50:28 info: ---------------------------------------
2021-11-21 10:50:28 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 10:50:28 info: ---------------------------------------
2021-11-21 10:50:31 info: All unit tests passed.
2021-11-21 10:50:33 info: All steps were completed successfully
2021-11-21 10:50:45 info: -------------------------------------------------
2021-11-21 10:50:45 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:50:45 info: -------------------------------------------------
2021-11-21 10:50:48 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:27:30

  console.log
    Expected a double digit number but got 5

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:32:29

  console.log
    Expected a double digit number but got 123

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:36:29


2021-11-21 10:51:57 info: -------------------------------------------------
2021-11-21 10:51:57 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:51:57 info: -------------------------------------------------
2021-11-21 10:52:00 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:27:30

  console.log
    Expected a double digit number but got 5

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:32:29

  console.log
    Expected a double digit number but got 123

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:36:29


2021-11-21 10:53:02 info: -------------------------------------------------
2021-11-21 10:53:02 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:53:02 info: -------------------------------------------------
2021-11-21 10:53:05 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:28:30

  console.log
    Expected a double digit number but got 5

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:33:29

  console.log
    Expected a double digit number but got 123

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:37:29


2021-11-21 10:54:09 info: -------------------------------------------------
2021-11-21 10:54:09 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:54:09 info: -------------------------------------------------
2021-11-21 10:54:12 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:28:30

  console.log
    Expected a double digit number but got 5

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:33:29

  console.log
    Expected a double digit number but got 123

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:37:29


2021-11-21 10:55:22 info: -------------------------------------------------
2021-11-21 10:55:22 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:55:22 info: -------------------------------------------------
2021-11-21 10:55:25 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:28:30

  console.log
    undefined

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:33:29

  console.log
    undefined

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:37:29


2021-11-21 10:57:19 info: -------------------------------------------------
2021-11-21 10:57:19 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:57:19 info: -------------------------------------------------
2021-11-21 10:57:22 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (5 ms)
    × should call new Promise() (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument
    × should be a function that takes a single argument
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!" (8 ms)
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:39:55)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       10 failed, 10 total
Snapshots:   0 total
Time:        1.357 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 10:57:23 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:58:06 info: -------------------------------------------------
2021-11-21 10:58:06 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:58:06 info: -------------------------------------------------
2021-11-21 10:58:09 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call new Promise() (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should be a function that takes a single argument
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!"
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.369 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 10:58:10 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:58:29 info: -------------------------------------------------
2021-11-21 10:58:29 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:58:29 info: -------------------------------------------------
2021-11-21 10:58:32 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call new Promise() (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should be a function that takes a single argument
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (5) should return a rejected promise with an Error object
    × (123) should return a rejected promise with an Error object (1 ms)

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.414 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 10:58:33 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:59:05 info: -------------------------------------------------
2021-11-21 10:59:05 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:59:05 info: -------------------------------------------------
2021-11-21 10:59:08 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (6 ms)
    √ should have all TODO comments removed (1 ms)
    × should call new Promise() (1 ms)
    × `resolve()` should be called with a one argument (3 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should be a function that takes a single argument (2 ms)
    × (10) should return a promise that resolves to "This is a double digit number!" (4 ms)
    × (99) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object (1 ms)

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.44 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 10:59:09 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:59:20 info: -------------------------------------------------
2021-11-21 10:59:20 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:59:20 info: -------------------------------------------------
2021-11-21 10:59:22 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call new Promise() (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should be a function that takes a single argument
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!"
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.382 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 10:59:23 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 10:59:53 info: -------------------------------------------------
2021-11-21 10:59:53 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 10:59:53 info: -------------------------------------------------
2021-11-21 10:59:56 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed (1 ms)
    × should call new Promise()
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should be a function that takes a single argument (1 ms)
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!"
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.459 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 10:59:57 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:00:13 info: -------------------------------------------------
2021-11-21 11:00:13 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 11:00:13 info: -------------------------------------------------
2021-11-21 11:00:16 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (6 ms)
    √ should have all TODO comments removed (1 ms)
    × should call new Promise() (1 ms)
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should be a function that takes a single argument (1 ms)
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!"
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object (1 ms)

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.393 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 11:00:17 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:03:06 info: -------------------------------------------------
2021-11-21 11:03:06 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 11:03:06 info: -------------------------------------------------
2021-11-21 11:03:09 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (2 ms)
    √ should have all TODO comments removed
    × should call new Promise()
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should be a function that takes a single argument (1 ms)
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!"
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.378 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 11:03:10 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:04:27 info: -------------------------------------------------
2021-11-21 11:04:27 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 11:04:27 info: -------------------------------------------------
2021-11-21 11:04:29 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (2 ms)
    √ should have all TODO comments removed
    × should call new Promise()
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should be a function that takes a single argument (1 ms)
    × (10) should return a promise that resolves to "This is a double digit number!"
    × (99) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (5) should return a rejected promise with an Error object
    × (123) should return a rejected promise with an Error object (1 ms)

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.365 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 11:04:30 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:05:24 info: -------------------------------------------------
2021-11-21 11:05:24 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 11:05:24 info: -------------------------------------------------
2021-11-21 11:05:27 error: *** Unit Test Error Report ***

Command failed: npx jest ex2-checkDoubleDigits.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js
  checkDoubleDigits
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    × should call new Promise()
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should be a function that takes a single argument (1 ms)
    × (10) should return a promise that resolves to "This is a double digit number!" (1 ms)
    × (99) should return a promise that resolves to "This is a double digit number!"
    × (5) should return a rejected promise with an Error object (1 ms)
    × (123) should return a rejected promise with an Error object

  ● checkDoubleDigits › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:36:22)

  ● checkDoubleDigits › should call new Promise()

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call new Promise()', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:42:30)

  ● checkDoubleDigits › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:46:27)

  ● checkDoubleDigits › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should be a function that takes a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:50:26)

  ● checkDoubleDigits › should be a function that takes a single argument

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should be a function that takes a single argument', () => {
    > 54 |     expect(exported).toBeDefined();
         |                      ^
      55 |     expect(
      56 |       typeof checkDoubleDigits === 'function' && checkDoubleDigits.length === 1
      57 |     ).toBe(true);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:54:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect(received).toBeDefined()

    Received: undefined

      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
      61 |     expect.assertions(3);
    > 62 |     expect(exported).toBeDefined();
         |                      ^
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:62:22)

  ● checkDoubleDigits › (10) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      59 |
      60 |   test('(10) should return a promise that resolves to "This is a double digit number!"', () => {
    > 61 |     expect.assertions(3);
         |            ^
      62 |     expect(exported).toBeDefined();
      63 |     const promise = checkDoubleDigits(10);
      64 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:61:12)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    TypeError: checkDoubleDigits is not a function

      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
      71 |     expect.assertions(2);
    > 72 |     const promise = checkDoubleDigits(99);
         |                     ^
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(
      75 |       expect.stringContaining('This is a double digit number!')

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:72:21)

  ● checkDoubleDigits › (99) should return a promise that resolves to "This is a double digit number!"

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      69 |
      70 |   test('(99) should return a promise that resolves to "This is a double digit number!"', () => {
    > 71 |     expect.assertions(2);
         |            ^
      72 |     const promise = checkDoubleDigits(99);
      73 |     expect(promise).toBeInstanceOf(Promise);
      74 |     return expect(promise).resolves.toEqual(

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:71:12)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      79 |   test('(5) should return a rejected promise with an Error object', () => {
      80 |     expect.assertions(2);
    > 81 |     const promise = checkDoubleDigits(5);
         |                     ^
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);
      84 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:81:21)

  ● checkDoubleDigits › (5) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      78 |
      79 |   test('(5) should return a rejected promise with an Error object', () => {
    > 80 |     expect.assertions(2);
         |            ^
      81 |     const promise = checkDoubleDigits(5);
      82 |     expect(promise).toBeInstanceOf(Promise);
      83 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:80:12)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    TypeError: checkDoubleDigits is not a function

      86 |   test('(123) should return a rejected promise with an Error object', () => {
      87 |     expect.assertions(2);
    > 88 |     const promise = checkDoubleDigits(123);
         |                     ^
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);
      91 |   });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:88:21)

  ● checkDoubleDigits › (123) should return a rejected promise with an Error object

    expect.assertions(2)

    Expected two assertions to be called but received zero assertion calls.

      85 |
      86 |   test('(123) should return a rejected promise with an Error object', () => {
    > 87 |     expect.assertions(2);
         |            ^
      88 |     const promise = checkDoubleDigits(123);
      89 |     expect(promise).toBeInstanceOf(Promise);
      90 |     return expect(promise).rejects.toBeInstanceOf(Error);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex2-checkDoubleDigits.test.js:87:12)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 1 passed, 10 total
Snapshots:   0 total
Time:        1.421 s
Ran all test suites matching /ex2-checkDoubleDigits.test.js/i.

2021-11-21 11:05:28 error: *** ESLint Report ***

ex2-checkDoubleDigits.js
  15:27  error  Parsing error: Unexpected token =

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:06:10 info: -------------------------------------------------
2021-11-21 11:06:10 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 11:06:10 info: -------------------------------------------------
2021-11-21 11:06:13 info: All unit tests passed.
2021-11-21 11:06:15 info: All steps were completed successfully
2021-11-21 11:20:09 info: ----------------------------------------
2021-11-21 11:20:09 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:20:09 info: ----------------------------------------
2021-11-21 11:20:12 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (5 ms)
    × should call `new Promise()` (1 ms)
    × `resolve()` should be called with a one argument (1 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call `new Promise()`', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:42:30)

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.471 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:20:13 error: *** ESLint Report ***

ex3-rollDice.js
  51:24  error  Parsing error: Unexpected token =>

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:21:01 info: ----------------------------------------
2021-11-21 11:21:01 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:21:01 info: ----------------------------------------
2021-11-21 11:21:04 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (6 ms)
    × should call `new Promise()`
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call `new Promise()`', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:42:30)

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.39 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:21:05 error: *** ESLint Report ***

ex3-rollDice.js
  51:24  error  Parsing error: Unexpected token =>

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:24:23 info: ----------------------------------------
2021-11-21 11:24:23 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:24:23 info: ----------------------------------------
2021-11-21 11:24:26 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (6 ms)
    × should call `new Promise()`
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call `new Promise()`', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:42:30)

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.357 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:24:27 error: *** ESLint Report ***

ex3-rollDice.js
  18:21  error  Parsing error: Unexpected token =>

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:25:05 info: ----------------------------------------
2021-11-21 11:25:05 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:25:05 info: ----------------------------------------
2021-11-21 11:25:08 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (5 ms)
    × should call `new Promise()`
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call `new Promise()`', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:42:30)

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.509 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:25:09 error: *** ESLint Report ***

ex3-rollDice.js
  54:24  error  Parsing error: Unexpected token =>

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:26:13 info: ----------------------------------------
2021-11-21 11:26:13 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:26:13 info: ----------------------------------------
2021-11-21 11:26:16 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (6 ms)
    × should call `new Promise()`
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when the dice settles successfully
    × should reject with an Error when the dice rolls off the table (2 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call `new Promise()`', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:42:30)

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.494 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:26:17 error: *** ESLint Report ***

ex3-rollDice.js
  54:24  error  Parsing error: Unexpected token =>

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:27:48 info: ----------------------------------------
2021-11-21 11:27:48 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:27:48 info: ----------------------------------------
2021-11-21 11:27:51 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    × should have all TODO comments removed (6 ms)
    × should call `new Promise()` (1 ms)
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (2 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      40 |
      41 |   test('should call `new Promise()`', () => {
    > 42 |     expect(state.newPromise).toBeDefined();
         |                              ^
      43 |   });
      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:42:30)

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.602 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:27:53 error: *** ESLint Report ***

ex3-rollDice.js
  54:24  error  Parsing error: Unexpected token =>

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:30:52 info: ----------------------------------------
2021-11-21 11:30:52 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:30:52 info: ----------------------------------------
2021-11-21 11:30:55 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (1 ms)
    × should have all TODO comments removed (6 ms)
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table

  ● rollDice › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:39:55)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        1.423 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:30:56 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:31:24 info: ----------------------------------------
2021-11-21 11:31:24 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:31:24 info: ----------------------------------------
2021-11-21 11:31:27 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument (1 ms)
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.497 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:31:28 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:32:17 info: ----------------------------------------
2021-11-21 11:32:17 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:32:17 info: ----------------------------------------
2021-11-21 11:32:20 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (2 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument (1 ms)
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        1.409 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:32:21 error: *** ESLint Report ***

ex3-rollDice.js
   3:9   error  'reject' is assigned a value but never used  no-unused-vars
  49:10  error  'error' is not defined                       no-undef
  49:17  error  'value' is not defined                       no-undef

✖ 3 problems (3 errors, 0 warnings)


2021-11-21 11:32:48 info: ----------------------------------------
2021-11-21 11:32:48 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:32:48 info: ----------------------------------------
2021-11-21 11:32:51 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    × should exist and be executable (3 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()` (1 ms)
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      34 |
      35 |   test('should exist and be executable', () => {
    > 36 |     expect(exported).toBeDefined();
         |                      ^
      37 |   });
      38 |
      39 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:36:22)

  ● rollDice › should resolve when the dice settles successfully

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should resolve when the dice settles successfully', () => {
      54 |     expect.assertions(3);
    > 55 |     expect(exported).toBeDefined();
         |                      ^
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      58 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:55:22)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
      77 |     expect.assertions(3);
    > 78 |     expect(exported).toBeDefined();
         |                      ^
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      81 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:78:22)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        1.637 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:32:52 error: *** ESLint Report ***

ex3-rollDice.js
   3:9   error  'reject' is assigned a value but never used  no-unused-vars
  50:10  error  'value' is not defined                       no-undef

✖ 2 problems (2 errors, 0 warnings)


2021-11-21 11:33:03 info: ----------------------------------------
2021-11-21 11:33:03 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:33:03 info: ----------------------------------------
2021-11-21 11:33:05 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (5 ms)
    √ should have all TODO comments removed (1 ms)
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument (1 ms)
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.23 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:33:06 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:33:46 info: ----------------------------------------
2021-11-21 11:33:46 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:33:46 info: ----------------------------------------
2021-11-21 11:33:49 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument (1 ms)
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.405 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:33:50 error: *** ESLint Report ***

ex3-rollDice.js
  51:5  error  'resolve' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:34:29 info: ----------------------------------------
2021-11-21 11:34:29 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:34:29 info: ----------------------------------------
2021-11-21 11:34:32 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()` (1 ms)
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (2 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.464 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:34:33 error: *** ESLint Report ***

ex3-rollDice.js
  51:5  error  'resolve' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:35:23 info: ----------------------------------------
2021-11-21 11:35:23 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:35:23 info: ----------------------------------------
2021-11-21 11:35:26 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (2 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.385 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:35:27 error: *** ESLint Report ***

ex3-rollDice.js
  51:5  error  'resolve' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:35:44 info: ----------------------------------------
2021-11-21 11:35:44 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:35:44 info: ----------------------------------------
2021-11-21 11:35:47 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()` (1 ms)
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (2 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.24 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:35:48 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:37:00 info: ----------------------------------------
2021-11-21 11:37:00 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:37:00 info: ----------------------------------------
2021-11-21 11:37:03 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()` (1 ms)
    × `resolve()` should be called with a one argument (2 ms)
    × `reject()` should be called with a one argument (1 ms)
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table

  ● rollDice › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      44 |
      45 |   test('`resolve()` should be called with a one argument', () => {
    > 46 |     expect(state.resolve).toBe(1);
         |                           ^
      47 |   });
      48 |
      49 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:46:27)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 3 passed, 7 total
Snapshots:   0 total
Time:        1.44 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:37:04 error: *** ESLint Report ***

ex3-rollDice.js
   3:9   error  'reject' is assigned a value but never used  no-unused-vars
  18:23  error  'resolve' is defined but never used          no-unused-vars
  18:32  error  'reject' is defined but never used           no-unused-vars

✖ 3 problems (3 errors, 0 warnings)


2021-11-21 11:38:00 info: ----------------------------------------
2021-11-21 11:38:00 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:38:00 info: ----------------------------------------
2021-11-21 11:38:02 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed (1 ms)
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (2 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.222 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:38:03 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:50:09 info: ----------------------------------------
2021-11-21 11:50:09 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:50:09 info: ----------------------------------------
2021-11-21 11:50:11 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()`
    √ `resolve()` should be called with a one argument (1 ms)
    √ `reject()` should be called with a one argument
    × should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › should resolve when the dice settles successfully

    TypeError: rollDice is not a function

      61 |       .mockImplementation((cb) => cb());
      62 |
    > 63 |     const promise = rollDice();
         |                     ^
      64 |     expect(promise).toBeInstanceOf(Promise);
      65 |     const assertionPromise = expect(promise).resolves.toBeDefined();
      66 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:63:21)

  ● rollDice › should resolve when the dice settles successfully

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      52 |
      53 |   test('should resolve when the dice settles successfully', () => {
    > 54 |     expect.assertions(3);
         |            ^
      55 |     expect(exported).toBeDefined();
      56 |
      57 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:54:12)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.217 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:50:12 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:50:52 info: ----------------------------------------
2021-11-21 11:50:52 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:50:52 info: ----------------------------------------
2021-11-21 11:50:54 info: All unit tests passed.
2021-11-21 11:50:55 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:54:05 info: ----------------------------------------
2021-11-21 11:54:05 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:54:05 info: ----------------------------------------
2021-11-21 11:54:07 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed
    √ should call `new Promise()` (1 ms)
    √ `resolve()` should be called with a one argument
    × `reject()` should be called with a one argument (2 ms)
    √ should resolve when the dice settles successfully (1 ms)
    × should reject with an Error when the dice rolls off the table (1 ms)

  ● rollDice › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      48 |
      49 |   test('`reject()` should be called with a one argument', () => {
    > 50 |     expect(state.reject).toBe(1);
         |                          ^
      51 |   });
      52 |
      53 |   test('should resolve when the dice settles successfully', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:50:26)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      75 |
      76 |   test('should reject with an Error when the dice rolls off the table', async () => {
    > 77 |     expect.assertions(3);
         |            ^
      78 |     expect(exported).toBeDefined();
      79 |
      80 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:77:12)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 5 passed, 7 total
Snapshots:   0 total
Time:        1.376 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 11:54:08 error: *** ESLint Report ***

ex3-rollDice.js
   3:9   error  'reject' is assigned a value but never used  no-unused-vars
  18:32  error  'reject' is defined but never used           no-unused-vars

✖ 2 problems (2 errors, 0 warnings)


2021-11-21 11:54:29 info: ----------------------------------------
2021-11-21 11:54:29 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:54:29 info: ----------------------------------------
2021-11-21 11:54:32 info: All unit tests passed.
2021-11-21 11:54:33 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 11:58:31 info: ----------------------------------------
2021-11-21 11:58:31 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 11:58:31 info: ----------------------------------------
2021-11-21 11:58:33 info: All unit tests passed.
2021-11-21 11:58:34 error: *** ESLint Report ***

ex3-rollDice.js
  3:9  error  'reject' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-22 12:00:20 info: ----------------------------------------
2021-11-22 12:00:20 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-22 12:00:20 info: ----------------------------------------
2021-11-22 12:00:23 info: All unit tests passed.
2021-11-22 12:00:25 info: All steps were completed successfully
